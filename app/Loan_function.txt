branch(branch_name, branch_city, assets)
customer(customer_id, customer_name, customer_street)
loan(loan_number, branch_name, amount)
borrower(customer_id, loan_number)
account(account_number, branch_name, balance)
depositor(customer_id, account_number)

create table customer *****
(customer_id	char(10),
customer_name	char(30),
customer_phone char(30),
customer_address	char(50),
primary key (customer_id)) ;

create table branch
(branch_name	char(15),
branch_city	char(30),
assets	integer,
primary key (branch_name),
check (assets >= 0)) ;

create table account
(account_number	char(10),
branch_name	char(15),
balance	integer,
primary key (account_number),
check (balance >= 0)) ;

create table depositor
(customer_id	char(10),
account_number	char(10),
primary key (customer_id, account_number)) ;

create table customer *****
(customer_id	char(10),
customer_name	char(30),
customer_phone char(30),
customer_email char(30),
customer_address	char(50),
primary key (customer_id, customer_email)) ;

loan_table ********
(loan_id char(10),
customer_email char(10),
loan_amount char(30),
loan_startdate varchar(50),
loan_enddate varchar(50),
primary key (loan_id, customer_email)
);

Payment table ***********
(pay_id char(10),
customer_email char(10),
paid_amount char(30),
paid_date varchar(50),
primary key (pay_id, customer_email)
);


Loan Remainder payment

App icon

StartDate
EndDate

Request Loan
if (balance != 0.0){
you cannot request for the loan until you pay the due amount} else{request loan}

Payment: PayAmount - Balance
if (balance <=0){You have no any loan to pay} else{Payment function: PayAMount - Due Balance}

Logout Function with Firebase
FirebaseAuth.getInstance().signout();
sratActivity(new Intent(getApplicationContext(), Login.class);
finish();



Description
The project perform the following functionalities:-
1. User login and registration using Firebase database Authentication
2. Loan calculator: Customer and or a lender will calculate his or her loan amount against interest and period to get the monthly loan return and total return
3. Request Loan: Customer will request for the loan.by entering loan amount and loan period and then submit
4. Pay Loan: Customer will pay for the loan.
5. History: Customer will view his or her Loan or Transaction history

PRESENTATION COMMENTS
- Integrate payment gateways
- Check if Lender has taken loan from another company / API(LOAN QUALIFICATION)
- Integrate with TRA
- NIDA number verification
- Beatiful UI/UX
- Register through phone no and send OTP verification
- Social network signin & signup

Loan type(Personal  Loan  / Business loan)

Technology used:
1. Android (Java)
2. Firebase Database (For data storage)

Access user information from Firebase

FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();
if (user != null) {
    // Name, email address, and profile photo Url
    String name = user.getDisplayName();
    String email = user.getEmail();
    Uri photoUrl = user.getPhotoUrl();

    // Check if user's email is verified
    boolean emailVerified = user.isEmailVerified();

    // The user's ID, unique to the Firebase project. Do NOT use this value to
    // authenticate with your backend server, if you have one. Use
    // FirebaseUser.getIdToken() instead.
    String uid = user.getUid();
}

